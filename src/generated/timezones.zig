// Code generated by `zig build tzdb`. DO NOT EDIT.
const std = @import("std");

pub const VERSION = "2024b";

pub const TZRule = struct {
    offset_seconds: i32,
    dst_offset_seconds: i32,
    starts_at: i64,
    ends_at: i64,
    name: []const u8,
};

pub const TimeZoneData = struct {
    name: []const u8,
    rules: []const TZRule,
};

pub const TIMEZONE_DB = [_]TimeZoneData{
    .{
        .name = "UTC",
        .rules = &[_]TZRule{
            .{ .offset_seconds = 0, .dst_offset_seconds = 0, .starts_at = -9223372036854775808, .ends_at = 9223372036854775807, .name = "UTC" },
        },
    },
    .{
        .name = "America/New_York",
        .rules = &[_]TZRule{
            .{ .offset_seconds = -18000, .dst_offset_seconds = 0, .starts_at = -9223372036854775808, .ends_at = 1710054000, .name = "EST" },
            .{ .offset_seconds = -18000, .dst_offset_seconds = 3600, .starts_at = 1710054000, .ends_at = 1730613600, .name = "EDT" },
            .{ .offset_seconds = -18000, .dst_offset_seconds = 0, .starts_at = 1730613600, .ends_at = 1741503600, .name = "EST" },
            .{ .offset_seconds = -18000, .dst_offset_seconds = 3600, .starts_at = 1741503600, .ends_at = 1762063200, .name = "EDT" },
            .{ .offset_seconds = -18000, .dst_offset_seconds = 0, .starts_at = 1762063200, .ends_at = 9223372036854775807, .name = "EST" },
        },
    },
    .{
        .name = "Europe/London",
        .rules = &[_]TZRule{
            .{ .offset_seconds = 0, .dst_offset_seconds = 0, .starts_at = -9223372036854775808, .ends_at = 1711846800, .name = "GMT" },
            .{ .offset_seconds = 0, .dst_offset_seconds = 3600, .starts_at = 1711846800, .ends_at = 1729990800, .name = "BST" },
            .{ .offset_seconds = 0, .dst_offset_seconds = 0, .starts_at = 1729990800, .ends_at = 1743296400, .name = "GMT" },
            .{ .offset_seconds = 0, .dst_offset_seconds = 3600, .starts_at = 1743296400, .ends_at = 1761440400, .name = "BST" },
            .{ .offset_seconds = 0, .dst_offset_seconds = 0, .starts_at = 1761440400, .ends_at = 9223372036854775807, .name = "GMT" },
        },
    },
    .{
        .name = "Asia/Tokyo",
        .rules = &[_]TZRule{
            .{ .offset_seconds = 32400, .dst_offset_seconds = 0, .starts_at = -9223372036854775808, .ends_at = 9223372036854775807, .name = "JST" },
        },
    },
    .{
        .name = "Australia/Sydney",
        .rules = &[_]TZRule{
            .{ .offset_seconds = 36000, .dst_offset_seconds = 3600, .starts_at = -9223372036854775808, .ends_at = 1712419200, .name = "AEDT" },
            .{ .offset_seconds = 36000, .dst_offset_seconds = 0, .starts_at = 1712419200, .ends_at = 1728144000, .name = "AEST" },
            .{ .offset_seconds = 36000, .dst_offset_seconds = 3600, .starts_at = 1728144000, .ends_at = 1743868800, .name = "AEDT" },
            .{ .offset_seconds = 36000, .dst_offset_seconds = 0, .starts_at = 1743868800, .ends_at = 1759593600, .name = "AEST" },
            .{ .offset_seconds = 36000, .dst_offset_seconds = 3600, .starts_at = 1759593600, .ends_at = 9223372036854775807, .name = "AEDT" },
        },
    },
};

pub fn lookupTimeZone(name: []const u8) ?TimeZoneData {
    inline for (TIMEZONE_DB) |tz| {
        if (std.mem.eql(u8, tz.name, name)) return tz;
    }
    return null;
}

pub fn allTimeZones() []const TimeZoneData {
    return TIMEZONE_DB;
}
